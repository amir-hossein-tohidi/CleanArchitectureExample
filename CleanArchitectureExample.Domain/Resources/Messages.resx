<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Author_AuthorGuidIsEmpty" xml:space="preserve">
    <value>Author Guid is empty</value>
  </data>
  <data name="Author_AuthorGuidIsNull" xml:space="preserve">
    <value>Author Guid is null</value>
  </data>
  <data name="Author_AuthorNameIsNull" xml:space="preserve">
    <value>Author name is null</value>
  </data>
  <data name="Author_AuthorNameNoLongerThantAHundredChars" xml:space="preserve">
    <value>Author name should have at maximum 100 letters</value>
  </data>
  <data name="Author_AuthorNameShouldHaveAtLeastFiveChars" xml:space="preserve">
    <value>Author name should have at least 5 letters</value>
  </data>
  <data name="BookLoan_BookGuidIsEmpty" xml:space="preserve">
    <value>Book Guid is empty</value>
  </data>
  <data name="BookLoan_BookGuidIsInvalid" xml:space="preserve">
    <value>Book Guid is invalid</value>
  </data>
  <data name="BookLoan_BookGuidStringIsEmpty" xml:space="preserve">
    <value>Book Guid string is empty</value>
  </data>
  <data name="BookLoan_BookIsAlreadyLent" xml:space="preserve">
    <value>This book is already lent</value>
  </data>
  <data name="BookLoan_BookIsNotLent" xml:space="preserve">
    <value>Book is not lent</value>
  </data>
  <data name="BookLoan_BookIsNull" xml:space="preserve">
    <value>Book not found</value>
  </data>
  <data name="BookLoan_BookNotFound" xml:space="preserve">
    <value>Book not found</value>
  </data>
  <data name="BookLoan_BookShouldBeReturnedWithin3Days" xml:space="preserve">
    <value>Books should be returned within 3 days</value>
  </data>
  <data name="BookLoan_BookSituationShouldBeAwaiting" xml:space="preserve">
    <value>Book situation should be 'Awaiting'</value>
  </data>
  <data name="BookLoan_BookSituationShouldBeLent" xml:space="preserve">
    <value>Book situation shoud be 'Lent'</value>
  </data>
  <data name="BookLoan_PersonNotFound" xml:space="preserve">
    <value>Person not found</value>
  </data>
  <data name="BookLoan_TakerIsNull" xml:space="preserve">
    <value>Taker not found</value>
  </data>
  <data name="BookReturn_LoanGuidIsEmpty" xml:space="preserve">
    <value>Loan Guid is empty</value>
  </data>
  <data name="BookReturn_LoanGuidIsInvalid" xml:space="preserve">
    <value>Loan Guid is invalid</value>
  </data>
  <data name="BookReturn_LoanGuidStringIsEmpty" xml:space="preserve">
    <value>Loan Guid string is empty</value>
  </data>
  <data name="Book_AuthorGuidIsInvalid" xml:space="preserve">
    <value>Author Guid is invalid</value>
  </data>
  <data name="Book_AuthorGuidStringIsEmpty" xml:space="preserve">
    <value>Author Guid string is empty</value>
  </data>
  <data name="Book_AuthorShouldNotBeNull" xml:space="preserve">
    <value>Invalid author</value>
  </data>
  <data name="Book_BookGuidIsEmpty" xml:space="preserve">
    <value>Book Guid is empty</value>
  </data>
  <data name="Book_BookGuidIsInvalid" xml:space="preserve">
    <value>Book Guid is invalid</value>
  </data>
  <data name="Book_BookGuidIsNull" xml:space="preserve">
    <value>Book Guid is null</value>
  </data>
  <data name="Book_EditionCannotBeLowerThan1" xml:space="preserve">
    <value>Edition cannot be lowern than 1</value>
  </data>
  <data name="Book_ISBNShouldHave10Chars" xml:space="preserve">
    <value>Books prior 2008 shoud have ISBN with 10 chars long</value>
  </data>
  <data name="Book_ISBNShouldHave13Chars" xml:space="preserve">
    <value>Books latter than 2007 shoud have ISBN with 13 chars long</value>
  </data>
  <data name="Book_ReleaseYearCannotBeGraterThanCurrentYear" xml:space="preserve">
    <value>Release date cannot be greater than current year</value>
  </data>
  <data name="Book_ReleaseYearShouldNotBeLowerThan1" xml:space="preserve">
    <value>Book release date cannot be lower than 1</value>
  </data>
  <data name="Book_ShouldNotBeNull" xml:space="preserve">
    <value>Book not found</value>
  </data>
  <data name="Book_TitleShouldNotBeNullOrEmpty" xml:space="preserve">
    <value>A book name cannot be empty</value>
  </data>
  <data name="Person_DocumentIsEmptyError" xml:space="preserve">
    <value>Document is empty</value>
  </data>
  <data name="Person_DocumentWrognCharCount" xml:space="preserve">
    <value>Document should have 11 characters</value>
  </data>
  <data name="Person_NameMiniumCharError" xml:space="preserve">
    <value>Name should have at least 5 letters</value>
  </data>
  <data name="Person_PersonWithDocumentExists" xml:space="preserve">
    <value>A person with this document already exists</value>
  </data>
  <data name="Person_ShouldHaveAtLeastOnePhoneNumber" xml:space="preserve">
    <value>Person shoudl shave ate least one related phone number</value>
  </data>
</root>